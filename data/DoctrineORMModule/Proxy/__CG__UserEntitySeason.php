<?php

namespace DoctrineORMModule\Proxy\__CG__\User\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Season extends \User\Entity\Season implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'seasonName', 'status', 'news', 'eventsList', 'newslettersList', 'classBlogsList', 'classPostsList'];
        }

        return ['__isInitialized__', 'id', 'seasonName', 'status', 'news', 'eventsList', 'newslettersList', 'classBlogsList', 'classPostsList'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Season $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeasonName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeasonName', []);

        return parent::getSeasonName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeasonName($seasonName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeasonName', [$seasonName]);

        return parent::setSeasonName($seasonName);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getNews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNews', []);

        return parent::getNews();
    }

    /**
     * {@inheritDoc}
     */
    public function getNewsAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewsAsString', []);

        return parent::getNewsAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function addNews($news)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNews', [$news]);

        return parent::addNews($news);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvents', []);

        return parent::getEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsListAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsListAsString', []);

        return parent::getEventsListAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventToList($event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventToList', [$event]);

        return parent::addEventToList($event);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewsletters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewsletters', []);

        return parent::getNewsletters();
    }

    /**
     * {@inheritDoc}
     */
    public function getNewslettersListAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewslettersListAsString', []);

        return parent::getNewslettersListAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function addNewsletterToList($newsletter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNewsletterToList', [$newsletter]);

        return parent::addNewsletterToList($newsletter);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassBlogs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassBlogs', []);

        return parent::getClassBlogs();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassBlogsListAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassBlogsListAsString', []);

        return parent::getClassBlogsListAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function addClassBlogToList($classBlog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClassBlogToList', [$classBlog]);

        return parent::addClassBlogToList($classBlog);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassPosts', []);

        return parent::getClassPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassPostsListAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassPostsListAsString', []);

        return parent::getClassPostsListAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function addClassPostToList($classPost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClassPostToList', [$classPost]);

        return parent::addClassPostToList($classPost);
    }

}
